/*!
 * tweetParser.js v2.1.3
 * Small Javascript Library that parse an element containing a tweet and turn URLS, @user & #hashtags into working urls
 * License : MIT
 * author Vincent Loy <vincent.loy1@gmail.com>
 * http://vincent-loy.fr
 */
!function(t){"use strict";var r,e,a;e=function(t){var r,e;for(t=t||{},r=1;r<arguments.length;r+=1)if(arguments[r])for(e in arguments[r])arguments[r].hasOwnProperty(e)&&(t[e]=arguments[r][e]);return t},a=function(t,r,e,a){var s=document.createElement("a");return s.href=t,s.classList.add(r),s.target=e,s.textContent=a,s},r=function(t,r){var s=document.querySelectorAll(t),n=e({urlClass:"tweet_link",userClass:"tweet_user",hashtagClass:"hashtag",target:"_blank",searchWithHashtags:!0,parseUsers:!0,parseHashtags:!0,parseUrls:!0},r);Array.prototype.forEach.call(s,function(t){var r,e=t.innerHTML,s=/(?:\s)(f|ht)tps?:\/\/([^\s\t\r\n<]*[^\s\t\r\n<)*_,\.])/g,u=/\B@([a-zA-Z0-9_]+)/g,c=/\B(#[á-úÁ-Úä-üÄ-Üa-zA-Z0-9_]+)/g;r=n.searchWithHashtags?"https://twitter.com/hashtag/":"https://twitter.com/search?q=",n.parseUrls&&(e=e.replace(s,function(t){var r=a(t,n.urlClass,n.target,t);return t.replace(t,r.outerHTML)})),n.parseUsers&&(e=e.replace(u,function(t){var r=t.slice(1),e="http://twitter.com/"+r,s=a(e,n.userClass,n.target,t);return t.replace(t,s.outerHTML)})),n.parseHashtags&&(e=e.replace(c,function(t){var e=t.slice(1),s=r+e,u=a(s,n.hashtagClass,n.target,t);return t.replace(t,u.outerHTML)})),t.innerHTML=e})},t.tweetParser=r}(window),window.jQuery&&!function(t,r){"use strict";function e(t,e){r(t,e)}t.fn.tweetParser=function(t){return e(this.selector,t)}}(jQuery,tweetParser);
//# sourceMappingURL=data:application/json;base64,
